[{"content":"","date":"2 November 2023","permalink":"/tags/korean_article/","section":"Tags","summary":"","title":"Korean_Article"},{"content":"","date":"2 November 2023","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"Rust\n","date":"2 November 2023","permalink":"/tags/rust/","section":"Tags","summary":"Rust","title":"Rust"},{"content":"\nMore details for rust tags : Rust tag\n","date":"2 November 2023","permalink":"/tags/","section":"Tags","summary":"More details for rust tags : Rust tag","title":"Tags"},{"content":" Here\u0026rsquo;s my cat Lambdaλ who expert on electronic engineering. This blog mainly cover with Linux, Rust, Embedded, and electronic circuits, and articles in Korean and English are mixed. Sometimes my cat Lambdaλ appears frequently, so I would appreciate it if you liked it. Nyaa ","date":"2 November 2023","permalink":"/","section":"Welcome to Jinwoo and Lambda 🐱 's blog","summary":"Here\u0026rsquo;s my cat Lambdaλ who expert on electronic engineering. This blog mainly cover with Linux, Rust, Embedded, and electronic circuits, and articles in Korean and English are mixed. Sometimes my cat Lambdaλ appears frequently, so I would appreciate it if you liked it.","title":"Welcome to Jinwoo and Lambda 🐱 's blog"},{"content":" 아직 작성 중인 글입니다. 중도에 내용이 변경 될 수 있습니다.\n최근에 현장에 내보낸 테스트용 기기\n서론 # C를 대체할 언어로서, 러스트는 주목을 받는 언어이며, 현재는 백엔드 개발을 하고있지만 과거 펌웨어에 빠져살던 나의 기준으로서, 예나 지금이나 프로그래밍 언어는 HDL언어가 아니라면 \u0026ldquo;500원 짜리 MCU에서 돌아가야한다\u0026rdquo; 라는 생각을 갖고있다.\n이런 관점에서는 현재 뜨고 있는 zig 외에는 러스트만이 C를 대체할 언어라고 생각한다. 하지만 이 주장에는 내가 러스트로 펌웨어를 양산레벨로 개발해본적이 없다 라는 결점이 존재한다. 이러한 문제점을 인지하고 몇번이나 시도를 2-3년 정도 하다가, 드디어 2023년 7월 부터 시작한 상용 러스트 임베디드 프로젝트가 제품 초기 양산 페이즈를 밟게되었다.\n내가 경험한 러스트 임베디드 그리고 장점과 기법등을 여러 글에 나눠서 다루고자 한다. 이 글에서는 사용한 개발 프레임워크, 프로젝트를 위해 개발 한 것들, 간단히 느낀 것에 대해 소개하고자 한다.\n개인적인 욕심으로 이번 경험을 통해 러스트 임베디드 에 관한 책을 싶으나 독자층을 3가지 분류에서 정하지를 못해, 책을 위해 독자층을 마음속에서 정하기전까지는 생각 나는대로 정리하는 형태로 예상하고 있다.\n\u0026ldquo;이미 러스트를 경험한 개발자\u0026rdquo; \u0026ldquo;취미로 아두이노를 하는 임베디드가 주업무가 아닌 개발자\u0026rdquo; \u0026ldquo;이미 임베디드 개발자\u0026rdquo; 번거럽게 이걸 설명하는 이유는, 러스트를 쓰는 임베디드 개발자가 너무 적기 때문에 대다수는 러스트에 관심이 있는 개발자의 범주에서 당장은 쓸 것이며 미지의 러스트 와 임베디드 둘 다 동시에 설명하기에는 너무나도 불친절하기 때문에 글의 서술이 느리더라도 임베디드 의 개발과정의 면을 조금 바라볼 수 있도록 서술 하는 과정을 걸치려고한다.\n제품 기획 # 2023년이 되서야 카드단말기를 달게 됬는가 라는 질문에는 오락실 산업 자체의 역사를 봐야한다. 2007년 경 바다이야기 이슈로 2020년까지 카드단말기와 같은 것을 달수 없다가 2020년부터 달 수 있게됬으나 이 경우에는 카드단말기를 다는 경우 게임 자체의 심의를 다시 받아야만 했다 하지만 이에 관해서 법이 최근에 와 허들이 낮아지게 되었고 최근에 와 나에게 카드단말기를 달수 있게 해주는 모듈의 개발 의뢰가 들어왔다.\n게임위, 내달 1일부터 아케이드 게임 결제 방식 다양화하기로 결정 - 2019-06-28 전체이용가 아케이드 게임물 결제방식 변경 관련 - 2022-03-21 지폐입력기의 예시\n카드 단말기는 RS232 시리얼 통신을 사용하고 있으며, 기존 게임기는 molex 2.00mm 간격의 10핀 커넥터를 지폐입력기 용으로 사용하며 혹은 2~4핀의 커넥터를 동전입력기 용으로 사용한다. 특수한 기능을 쓰지않으면 10핀을 쓰는 지폐입력기와 동전입력기의 신호체계는 호환이 되며 과거와 달리 물가가 많이 오른 시점에서 500원, 100원 주화보다는 1000원 지폐를 지불방식으로 많이 사용하고 있기에 지폐입력기의 배선을 좀 더 우선하기로 했다.\n기존 게임기에 카드단말기를 추가하기 위해서는 기존 화폐 지불 신호선을 공유하여 사용하여 지폐입력기 (혹은 동전입력기) 대신 신호를 만들어 주는 수 밖에 없다. 이 때 단순히 기존 배선에 그대로 신호를 주게되면 지폐입력기의 신호와 카드단말기에서 나온 신호가 중첩되게 된다. 따라서 각 신호의 출력쪽에 대해 FIFO Queue를 적용하여 지폐입력과 카드단말기 입력이 중첩되도 순차처리 할 수 있도록 구성하고 하드웨어도 이를 고려하여 구성하였다.\n하드웨어 개발 # STM32G030C8Tx 칩선정 # STM32G030C8Tx 은 ST 사의 Cortex-M0 (ARM cortex-Mv6) MCU이다. MCU는 32비트 CPU를 내장하고 임베디드를 위한 주변장치를 탑재하는 물건을 말한다. 이 제품은 64KBytes의 프로그램을 담을 수 있는 Flash와 8KB SRAM(컴퓨터의 RAM과 비슷) 이 있으며 16Mhz로 동작한다. 절반의 용량인 32KBytes 을 갖고있는 제품도 있지만 회사에서 간단한 제품을 개발할때 32Kbyte는 rust에서 debug build를 올리기엔 무리가 있었다라는 경험과 비교적 기능이나 비즈니스 로직이 커질 것 같다라는 예상이 있어 확 늘리진 않고 64Kbyte로 정했다. 그리고 전반적으로 최소한의 컴퓨팅 리소스를 갖고있는 저렴한 MCU에서 러스트 임베디드 제품을 만들수 있어야 러스트로 임베디드를 양산, 업무용으로 쓸수 있다라는것을 증명 할 수 있다 라는 생각도 기반했다. (Go, Python, Javascript로도 임베디드에 돌아가는 코드를 만들수는 있다고한다 하지만 양산용으로 쓸수있는 단가가 매우 낮은 환경에선 많이 힘들다고 생각하고 비싼 칩에서만 돌아가면 의미 없다고 생각한다.)\nPCB (회로) 개발 # 왼쪽의 Gerber 데이터는 공개를 하지않지만 schematic (회로도) 는 공개를 하고있다. BillMock-HW-RELEASE\n회로 개발에는 KiCad 를 사용하였다. KiCad 는 CERN이 공개한 오픈소스 EDA 캐드 프로그램이다. 보편적으로 사용하는 OS, Linux, macOS, Windows 를 전부 지원하며 5.x 버젼부터 써왔으며 현재 6.x를 거쳐 7.x에서는 꽤 쓸만하져 이번 프로젝트에도 적용했다.\nPCB (회로) 개발은 대략적으로 schematic개발과 gerber routing으로 나뉜다. schematic은 오른쪽 이미지와 같이 회로를 어떻게 구성할지에 대한 도식표로 나타낸 형태이다. gerber routing은 왼쪽 이미지와 같이, 실제로 어떻게 구리배선과 부품들을 인쇄/실장 할 것인지 나타내는 형태이다. 회로상에서 요구되는 커넥터의 위치, 배선에 흐르는 통신의 속도나 전기적인 신호의 크기, 전원 요구사항 등에 따라 가까이 배치하거나 멀리배치, 그리고 두껍거나 비교적 얇게 배선을 routing한다.\n프로그램도 최적화를 하듯이 회로도 최적화가 필요하며 적거나 적은 종류의 부품, 적당히 값싼 부품, 전체적인 사이즈 감소나 사양 을 낮추면서 단가를 줄이되 기획상 하드웨어의 기능과 안정성은 어느정도 들고가는 것이 중요하다.\n프로토 타입 생산 # 프로토 타입은 JLCPCB를 이용하였다. 회사에서 진행하는 프로젝트라고 한다면 국내 턴키업체에 맞기는게 정석적인 선택이나, 이미 JLCPCB의 SMT(부품 조립)서비스를 여러번 써본 입장에서는 오히려 적응을 따로 할 필요도 없고 JLCPCB에서 소량에 대해 매우 저렴하게 결과물이 잘 나온다면, 나중에 다른 업체에서 양산을 한다고 해도 왠만해서 될거라는 믿음이 있었다. (소량 샘플은 JLCPCB가 이례적으로 저렴하다.)\n백엔드 서버 개발자의 입장에서 비유를 한다면, \u0026ldquo;10년된 학교 동아리 서버에서 돌아가니, 최종 릴리즈때 IDC에서 잘 돌아가지 않을까\u0026rdquo; 라는 생각과 비슷하지 않을까 생각한다.\n최종 양산 # BOM정리 및 부품 구매 # 소프트웨어와 다르게 하드웨어에 가까워지면, BOM이라는 단어를 많이 듣게 된다. Bill Of Matterial 은 말그대로 부품리스트 이며 가격이나 이것저것 정보를 필연적으로 포함하게된다. 여기서 가격이 너무 비싸면 설계단으로 되돌아와 크게 설계를 바꾸거나 설계 변경없이 변경가능한 부품이 있으면 대체 부품으로 채워 넣기도 한다. 이 과정에서 한번 자체적으로 너무 비싸다는 판단을 내려 커넥터 개수를 줄이고 어느정도의 수요 예측을 통해 \u0026ldquo;Reel\u0026rdquo; 단위로 부품을 미리 땡겨서 구매하도록 했다.\n양산을 위해 조립 공장에 보낸 부품들, Reel은 원통형으로 부품이 필름테이프 처럼 감겨있는것을 Reel이라고 한다.\nBOM 정리 / 최적화는 매우 중요하나 일반적인 소프트웨어 개발자에게는 감흥이 없는 주제이므로 유튜버 승우아빠의 레스토랑 BOM을 보면 재미를 느낄 수 있다고 생각한다. 전자 회로에 대한 이야기가 아닌 레스토랑 운영에서의 BOM(음식재료) 관리이긴 하나 매우 유익하다고 생각한다.\n왜 이렇게 되는지 알려드리겠습니다. - 승우아빠 일상채널\n생산 위탁 / 조립 위탁 # PCB를 만드는것과 부품을 그위에 올려서 납땜하는 것(조립, PCB Assembly)은 별개의 일이다. 턴키 업체에 부품 구매까지 맡기는 경우가 있으나 나의 경우엔 사급(이쪽에서 구매해서 제공함)으로 진행하였다.\n그리고 업체는 이미 양산 경험이 있는 회사 선배의 추천을 받은 턴키업체를 이용하였다. (신뢰 기반으로 발품 파는 시간을 줄였다.)\n국내에서 양산을 한 이유 (JLCPCB 혹은 다른 중국에서 하지 않은 이유) # 국뽕이라고 하면 국뽕이 될 수 있지만 한국은 아직까지 제조업을 어느정도 내부에서 처리할 수 있는 나라이다. 해외에 1인으로 개인 양산하는 외국인들은 중국업체에 주로 맡기나, 한국에선 국내에서 다 처리가 되므로 양산만큼은 국내에서 하면 좋다. 수량이 매달 몇 만개 이상 만든다고하면 해외에 공장을 둠으로서 더욱 생산 단가를 줄일 수 있겠지만 1인 개인 양산에서는 해외 공장이 매번 잘하는지 감시할 능력과 인력, 그리고 잘못되었을때 책임질 수 가 없다.\n내가 만든 PCB기준으로 1000대를 양산한다고 가정했을 때, JLCPCB가 압도적으로 저렴하긴 하나, 어느 시점에서는 20~30%정도 밖에 차이가 나지않는 지점이 존재했다. 거기에 운송비, 관부가세, 기타 행정 비용을 고려하면 JLCPCB쪽이 별로 이득을 가져다 주지도 않았고 다른 것 보다 문제가 발생했을때에 대해 책임을 제대로 지지않는 다는 것이다. 이 외에 JLCPCB 말고 다른 해외 업체들은 퀄리티는 좋으나 결국에는 문제가 발생했을때 직접 찾아가서 논의를 하기 힘들다라는 문제점은 여전히 존재한다.\n초창기 PCB 10대를 주문했는데 5대가 불량이였다, 하지만 내가 먼저 클레임을 걸어야한다.\n프로그램 다운로드 # MP Tool\nPCB를 만들었다고 해도, 그냥 돌아가는게 아니라 프로그램을 넣어줘야한다. 조립 위탁 단계에서 요청하면 프로그램 바이너리를 넣어주는 경우도 있으나 이번에는 커스텀 프로그램이 필요하여 이쪽에서 직접 넣는 방향으로 했다.\n왜 그런 과정을 거치고 어떻게 개발했는지에 다루면 너무 길어지기에 차후 다른 글에서 다루도록 하고\n대략적인 과정은 이러하다\ngraph LR; A[Power Up] --\u003e|Flash \\nLock Check| B(Unlock Flash\\nTemporary) B --\u003e C[Program\\nDownload] C --\u003e |OTP section\\n check|D{S/N Exist?} D --\u003e|Yes| E[Update to DB] D --\u003e|No| F[Write New OTP\\n\u0026 Insert to DB] 여기서 OTP섹션에 있는 시리얼 넘버를 확인하고 유무에 따라 정보를 추가하거나 갱신하는 과정이 추가로 들어간다. OTP에 시리얼 넘버가 없으면 OTP섹션에 시리얼 넘버를 기입한다.\n글을 마치며 # 최종 양산한 기판\n다음에는 rust로 개발한 펌웨어 소프트웨어 개발 측면에서 다루고 그 뒤에는 러스트 임베디드 생태계, 터득한 테크닉? 같은것을 다루지 않을까 싶다.\n처음으로 개인 양산을 경험한 것이 러스트로 개발한 펌웨어 위에서 돌아가는 것 과 성공적으로 양산을 마칠 수 있어서 매우 기쁘게 생각한다.\n다음에도 개인에서 양산을 하라고 하면 못할 것 같다. 개발을 하는데 있어서의 도움되는 귀중한 경험으로 삼고 이걸 주업으로 혼자서 다 소화하기에는 큰 무리가 있다. 그래도 한번쯤은 혼자서 양산을 태워볼 기회가 있으면 해보는 것을 추천한다.\n","date":"2 November 2023","permalink":"/posts/my_first_commerical_rust_embedded_product_1/","section":"Posts","summary":"아직 작성 중인 글입니다. 중도에 내용이 변경 될 수 있습니다. 최근에 현","title":"러스트 임베디드 양산 제품 개발기 - 1 개발/양산 과정부터 설명"},{"content":"","date":"2 November 2023","permalink":"/tags/%ED%9A%8C%EA%B3%A0%EB%A1%9D/","section":"Tags","summary":"","title":"회고록"},{"content":"","date":"8 April 2023","permalink":"/tags/amd/","section":"Tags","summary":"","title":"AMD"},{"content":"","date":"8 April 2023","permalink":"/tags/cache/","section":"Tags","summary":"","title":"Cache"},{"content":"","date":"8 April 2023","permalink":"/tags/ryzen/","section":"Tags","summary":"","title":"Ryzen"},{"content":"","date":"8 April 2023","permalink":"/tags/silicon-bug/","section":"Tags","summary":"","title":"Silicon Bug"},{"content":"이제 어느정도 ZEN4가 팔린지도 오래되었으며 ZEN3도 stepping? 내부적인 revision이 몇번 바뀌어 개선이 된 것 같아 적당한 시기다 싶어서 이 글을 작성합니다. 이 글은 다른 커뮤니티에도 올렸고 어떻게 보면 개발과 거리가 있으나 CPU 내부를 다루는 관계로 개발블로그에도 옮깁니다.\n전력사용량이 크게 달라지는 경우 Instruction L1, L2 cache 가 장애가 발생함 # 퀘이사존에 WHEA 만 검색해도 수많은 글을 볼 수 가 있습니다.\n과거에 수많은 사람들이 AMD Zen2/ Zen3를 쓰면서 이러한 문제점들은 보고했습니다.\n갑자기 WHEA 18에러가 Windows상의 Event Logger에 뜬다. 갑자기 꺼진다. [Halt] (로그 찾을 수 없음) 갑자기 리셋된다. [Reset] (로그 찾을 수 없음) 아무것도 안하고있는데 위와 같은 현상이 일어난다. C-State를 Disable하니 이러한 이슈가 덜 생긴다. C-State를 끄세요 저 또한 3950x를 과거에 쓰면서 이러한 이슈를 겪었으며 이로 인해서 매우 많은 시간을 허비했으며 결국에는 3950x를 5950x(최근의 Stepping Revision) 그리고 그 중간에 임시로 쓰게되는 5900x를 구매하면서\n컴퓨터가 2대가 되는 자가증식까지 하는 상황까지 겪었습니다. 그리고 이과정에 메인보드는 3번 구매했습니다.\n여기 까지 글을 읽으시면 몇가지 키워드가 보이실겁니다.\n키워드1 키워드2 키워드3 Instruction L1, L2 cache C-State Reset/Halt C-State란 # C-State부터 먼저 설명하겠습니다. 출처 : https://www.dell.com/support/kbdoc/ko-kr/000060621/c-state%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\nC-State 는 CPU소모전력을 줄일 수 있는 기능으로, 사용을 덜하는 경우 최대한으로 줄입니다.\n실제로 AMD은 Intel이든 C-State를 켠상태에서 PC가 Idle시 사용되는 전력사용량은 UPS로 확인시 매우 큽니다. 10W정도에서 20W정도 차이가 납니다. 이정도 차이면 이번에 새로나온 Intel Alderlake-N100 MiniPC를 충분히 구동할 수 있는 전력이죠. 또한 이 기능은 1990년대에 나온 기능으로 사실상 그냥 지원을 온전히 보장 해주는게 맞는 좋은 기능입니다.\nInstruction L1, L2 cache 란 # 컴퓨터공학과 학부에서 배우는 \u0026ldquo;컴퓨터 구조론\u0026rdquo; 과목에서 배우는 메모리 모델부터 설명을 해보겠습니다.\n[출처 : https://diveintosystems.org/book/C11-MemHierarchy/mem_hierarchy.html ]\n근대의 메모리 시스템은 이와같이 피라미드 형태로 되어있습니다.\n가장 꼭대기에 있는 register부터 cache을 거쳐 Flash Disk 그리고 그아래까지 접근시간과 대신 담고 있는 양 (용량)의 차이가 비례해서 올라갑니다.\nCPU입장에서 register에 접근하는데는 가장 짧은 시간이 걸리는 대신 register의 면적당 가격은 매우 비싸며\n뒤로 갈수록 시간은 좀 걸리는 대신 가격은 싸집니다.\n이 그림에서는 register/cache/Main Memory 사이의 용량이 나와있지는 않지만 사용하는 시스템/목적에 따라 사용될 용량의 분배는 매우 중요할것이며, \u0026ldquo;어떻게 나뉘냐\u0026rdquo; 를 잘 배분 하는 것이 중요합니다. 여기서 사용자가 마음대로 할 수 있는것이라면 디램을 많이 때려박아주는게 될 수 있겠습니다.\n그러면 Instruction L1, L2 cache 은 무엇인가 하면\nCPU는 데이터를 처리를 빨리 접근/읽기 위해서도 cache가 필요하지만\ncache는 CPU가 명령어 소화를 빨리 하기위해서도 cache가 필요합니다.\n데이터를 읽는 목적이나 명령어를 처리하는 과정에서 cache에 데이터가 없다면 DRAM(main memory)에서 가져오는 동안 사실상 일을 멈추고 있는 상태가 됩니다. (파이프라이닝 개념은 여기서 고려안하겠습니다.)\n그리고 뒤에있는 1/2는 1은 CPU각 코어에 가장 빨리 접근할수 있는 공간이며 2는 1보다는 약간 멀리떨어진 계층입니다. (그래도 DRAM보다는 가깝습니다.)\n다시 Zen2/3로 돌아와서 설명하자면 Zen2/3에서 나온 CPU는 16코어 짜리 제품으로서 가장 코어가 많습니다. 그리고 멀티다이 구조를 채택하여 8코어를 두개씩 패키징한 제품입니다.\n그래서 실제로는 메모리 모델이 위에잇는 세모 피라미드 모양이 되지않고 피라미드위에 피라미드 2개가 있고 그 2개의 피라미드 위에 피라미드가 8개씩 추가로 있는 구조가 나옵니다.\n위에서 제기한 증상에 대한 자세한 보고 # 조립 PC를 사용하는 대다수의 사용자들은 Windows를 사용하고 있으시며, 이 글에서 언급한 문제를 겪으셨다면\nWindows Event Logger에서 WHEA18?이란 에러가 뜨거나 아예 에러가 뜨지 않은채 꺼지시(reset)거나 멈추셨(Halt)겁니다. Reset이냐 Halt냐는 아마 메인보드에 다를겁니다. 이는 제가 Asrock/Gigabyte/Asus, B550/X570을 3개다 써보면서 각기 다른식으로 에러가 나오는 것을 확인했습니다.\n이 문제를 정확히 분석하려면 우리는 Windows를 들여다볼게 아니라 Linux 커뮤니티에서 해답을 찾을 수 잇습니다.\n[Correctable MCE errors logged for CPU0/CPU12 L1 instruction cache with AMD Ryzen 9 3900X 12-Core Processor] https://bugzilla.redhat.com/show_bug.cgi?id=1830404 [Random freezes and reboots AMD Ryzen] https://bugzilla.kernel.org/show_bug.cgi?id=210261 (두개의 링크 말고도 수많은 보고가 있으나 일단 2개만 게시합니다.)\n글자체가 매우 기니 요약만 한다면\n랜덤한 시간에 아래와 같은 에러가 뜨며 멈춘다. 그리고 CPU를 바꾸니 그냥 해결됬다\nC-State를 키면 문제가 발생하지않거나 덜 발생한다.\nMay 01 15:06:59 kernel: mce: [Hardware Error]: Machine check events logged May 01 15:06:59 kernel: [Hardware Error]: Corrected error, no action required. May 01 15:06:59 kernel: [Hardware Error]: CPU:12 (17:71:0) MC1_STATUS[Over|CE|MiscV|AddrV|-|-|SyndV|-|-|-]: 0xdc20000000030151 May 01 15:06:59 kernel: [Hardware Error]: Error Addr: 0x000000076da32ae0 May 01 15:06:59 kernel: [Hardware Error]: IPID: 0x000100b000000000, Syndrome: 0x000000001a030507 May 01 15:06:59 kernel: [Hardware Error]: Instruction Fetch Unit Ext. Error Code: 3, IC Data Array Parity Error. May 01 15:06:59 kernel: [Hardware Error]: cache level: L1, tx: INSN, mem-tx: IRD May 01 15:06:59 kernel: mce: [Hardware Error]: Machine check events logged May 01 15:06:59 kernel: [Hardware Error]: Corrected error, no action required. May 01 15:06:59 kernel: [Hardware Error]: CPU:0 (17:71:0) MC1_STATUS[Over|CE|MiscV|AddrV|-|-|SyndV|-|-|-]: 0xdc20000000030151 May 01 15:06:59 kernel: [Hardware Error]: Error Addr: 0x0000000fbedc2ae0 May 01 15:06:59 kernel: [Hardware Error]: IPID: 0x000100b000000000, Syndrome: 0x000000001a030507 May 01 15:06:59 kernel: [Hardware Error]: Instruction Fetch Unit Ext. Error Code: 3, IC Data Array Parity Error. May 01 15:06:59 kernel: [Hardware Error]: cache level: L1, tx: INSN, mem-tx: IRD 에러에 대한 원인 추측/분석 # 특정 상황이 매우 드물게 발생하는데 (CPU가 3Ghz 이상이니 1초에 3000000000사이클 일것이며 사이클 관점에서 봤을때 30분에서 24시간중 한번 발생한다하면 매우 드물다는 입장이지, 사용자 입장에서 잦거나 드물다는 표현은 아닙니다.)\n어느 위에 언급한 C-State에서 힌트를 찾았는데요\nC-State가 켜져있다면 매우 짧은 시간에 CPU core에 인가되는 전력이 매우 작다가 매우 커질것이며 C-State가 꺼져있다면 매우 짧은 시간에 CPU core에 인가되는 전력이 약간 적었다가 매우 커질것입니다. 그럼 원인은 짧은 시간내에 CPU Core에 인가되는 전력차에 따라 CPU Instruction $1/$2 에 영향이 가므로\nCPU가 명령어를 수행하다가 $ (캐시)에서 읽어올 명령어 자체가 coruppted(잘못됨)되었으니 CPU는 명령어를 수행할 수 없습니다. 더이상 나아갈 수 도 없으며 사실 이경우 코어덤프 (메모리 덤프)를 남기는 것 조차 기적일 것 입니다. [대충 메모리 디버깅에는 두가지 방법이 있는데요 SW로 전체 메모리를 백업하는 것과 외제차 가격보다 비싼 하드웨어 장비로 메모리를 덤프뜨는 두가지 방법이 있으며 이때는 후자로만 제대로 분석 할 수있습니다.]\n$1/$2 의 내용은 DRAM(Main Memory)와 미러링, 즉 빨리 접근하기위해 담아두는 공간이라고는 하지만.\n실제 운영체제나 프로그램 설계에서는 linux의 per-cpu 변수 처럼 대체적으로 각 아키텍처의 $1(L1 캐시) 사이즈와 같거나 그보다 작은 크기를 블럭단위로 하며 SMP 시스템 (멀티 코어 시스템)에서 더 DRAM에 저장되지 않고 더 빠르게 읽고 쓰기위해 DRAM에 주소와 메모리 정보가 저장은 되어있지만 사실상 DRAM보다는 캐시에 정확한 정보가 적혀있다고 전제되는 값들이 있습니다. 만약 $1/$2를 믿을수 없는 상황이 되면 per-cpu와 같은 특성을 가진 변수(컴퓨터 프로그램이 사용하는 값)은 제대로 쓸수도 없게 될것이며 이는 Instruction에도 비슷하게 적용이 될수도있습니다.\n진짜 이문제가 CPU에 인가되는 전력의 급격한 변화에 따른 것인지는 어디까지나 추측이지만\n이렇게 많은 사람들이 $1/$2에 문제가 있다고 하는 것은 개인적인 소견으로서는 리콜 감입니다.\n뒤에 있는 per-cpu어쩌구 저쩌구는 학부에서 배우진 않지만 CPU $1/$2는 학부에서 배우는 수준의 지식이며, 기본적인 설계에서 미스가 있는 것 이니까요.\nper-cpu 에 대한 자세한 링크 : http://jake.dothome.co.kr/per-cpu/\n그래서 AMD와 유통사는 어떻게 대응하는가 # 그래서 AMD와 유통사는 어떻게 대응하는가. 유통사가 어떻게 불량점검을 하는지 보면 부팅을 하고 벤치마크 프로그램을 돌립니다. 이게 끝입니다. 사실상 이러한 문제는 전문적으로 Trace32같은 장비를 쓰지않는 이상 문제를 찾기 어렵습니다.\n[출처 : https://www2.lauterbach.com/pdf/general_ref_c.pdf 172페이지]\nTrace32 를 사용하면 실시간으로 CPU의 모든 값을 볼수가있습니다. 일반인 혹은 대다수의 개발자가 고작 할수 있는 방법은 그냥 메모리 주소에 접근하는것이 다이나 이건 DRAM의 값인지 Cache 의 값인지 알수가 없습니다. 이러한 고급 개발툴도 필요하지만 이런 도구를 써서 유통사가 AS를 한다는것은 사실상 불가능에 가깝습니다. 따라서 AS를 진행하시는 직원 분들도 해당 이슈에 대해서는 매우 곤란할 것입니다.\n소비자 입장에서도 이를 입증하고 교환받기가 매우 까다롭습니다.\n그럼 제 생각에 잘못은 AMD에 있습니다.\n처음에 QC에 문제가 있거나, 실리콘 설계를 할때 이러한 문제를 제대로 검증 및 수정하지 않고 판매한 것이 문제라고 생각합니다.\n그래서 AMD는 자기네 CPU의 결함에 대해서 공개를 하거나 공유하는가?\n아뇨 인텔보다는 훨씬 숨기고있습니다.\n일단 인텔은 Errata Sheet (설계결함, 이슈에 대해 정리한 페이퍼) 를 나온지 얼마 안된 13세대에 대해서 공유했습니다.\n[ Intel Raptor Lake S - Errata Details ] https://edc.intel.com/content/www/us/en/design/products/platforms/details/raptor-lake-s/13th-generation-core-processor-specification-update/errata-details/\n그런데 AMD는 소비자용 Zen2 : Family 17h Model 71h , Zen3 : Family 19h Model 21h에 대한 Errata Sheet를 공개하지 않았습니다.\n칩을 구매해서 직접 PCB 회로를 만드시거나 리눅스 커널 드라이버를 작성하는 업무를 하시는 분들은 ErrataSheet를 들어보시고 가끔 거기서 문제점을 찾아 다시 부품 선정을 하거나 고려해서 소프트웨어 상으로 실리콘 버그를 해결 하는 경우가 있을 겁니다만\n이렇게 심각한 문제에 대해서 아무런 고지를 하지않고 그냥 아름아름 인터넷상으로 C-State Disable하라는 글에 의존하면서 이러한 이슈를 숨기는것에 대해 매우 실망스럽습니다.\n앞으로는 이러한 메모리 계층 구조(memory hierarchy)에 심각한 문제가 있는 제품의 결함을 제대로 고시하지않는 AMD가 바뀌길 기대하며 memory 를 좋아하는 고양이 사진으로 이 글을 마칩니다. ","date":"8 April 2023","permalink":"/posts/casts_double_amd_desktop_zen_2_and_3_halt_randomly_kr/","section":"Posts","summary":"이제 어느정도 ZEN4가 팔린지도 오래되었으며 ZEN3도 stepping? 내부적","title":"ZEN 2/3 의 QC/설계결함으로 인한 간혈적 리셋/멈춤 의혹 제기"},{"content":" 1. Fourier series coefficients for Continuous signal # Asking deriving coefficients comes with periodic signal.: \\(x(t) \\rightarrow a_k\\)\n1.1 (CT FS) Basic concept of continuous Fourier coefficients # $$ \\begin{gathered} x(t): \\text { Periodic signal } \\ T: \\text { Fundamental Period } \\ \\end{gathered} $$\n$$ \\begin{gathered} \\omega_0=\\frac{2 \\pi}{T} \\quad \u0026amp; \\quad f_0=\\frac{1}{T}(\\text { freq }) \\ \\end{gathered} $$\n$$ \\begin{gathered} \\quad x(t)=\\sum_{k=-\\infty}^{+\\infty} a_k e^{j k \\omega_0 t}=\\sum_{k=-\\infty}^{+\\infty} a_k e^{j k(2 \\pi / T) t} \\end{gathered} $$\n1.2 (CT FS) Continuous-Time, Fourier Series # Convert periodic signal to fourier coefficients : \\(x(t) \\stackrel{F S}{\\rightarrow} a_k\\)\n$$ \\begin{gathered} a_k=\\frac{1}{T} \\int _T x(t) e^{-j k \\omega_0 t} d t \\ \\end{gathered} $$ $$ or $$\n$$ \\begin{gathered} a_k=\\frac{1}{T} \\int_T x(t) e^{-j k(2 \\pi / T) t} d t \\end{gathered} $$\n1.3 (CT IFS) Continuous-Time, Inverse Fourier Series # Fourier coefficients to peridoic signal : \\(a_k \\stackrel{I F S}{\\longrightarrow} x(t)\\)\n$$ x(t)=\\sum_{k=-\\infty}^{+\\infty} a_k e^{j k \\omega_0 t}=\\sum_{k=-\\infty}^{+\\infty} a_k e^{j k(2 \\pi / T) t} $$\n1.4 Properties of Continuous-Time Fourier Series # Fourier transform for Continuous-time signal \\(x(t)\\) Most of case, aperiodic signals comes...\n2. Fourier coefficients for Discrete signal # $$ \\begin{gathered} x[n] \\rightarrow \\boldsymbol{a}_{\\boldsymbol{k}} \\end{gathered} $$ Asking deriving coefficients comes with periodic signal.\n2.1 (DT FS) Basic concept of discrete Fourier coefficients \\(x[n]: Periodic\\) # $$ \\begin{gathered} x[n]: \\text { Periodic signal } \\end{gathered} $$\n$$ N \\text { : Fundamental Period (LCM of } 2 \\pi \\text { ) } $$\n$$ \\begin{gathered} \\omega_0=\\frac{2 \\pi}{N} \\quad \u0026amp; \\quad f_0=\\frac{1}{T}(\\text { freq }) \\end{gathered} $$\n$$ x[n]=\\sum_{k=\\langle N\\rangle} a_k e^{j k \\omega_0 n}=\\sum_{k=\\langle N\\rangle} a_k e^{j k(2 \\pi / N) n} $$\n2.3 (DT FS) Discrete-Time, Fourier Series # $$\\begin{gathered} a_{k}=\\frac{1}{N} \\sum_{n=\\langle N\\rangle} x[n] e^{-j k \\omega_{0} n} \\ a_{k}=\\frac{1}{N} \\sum_{n=\\langle N\\rangle} x[n] e^{-j k(2 \\pi / N) n} \\end{gathered}$$\n$$\\begin{aligned} \u0026amp; x[n] \\stackrel{F S}{\\rightarrow} a_{k} \\end{aligned}$$\n2.4 (DT IFS) Discrete-Time, Inverse Fourier Series # $$a_{k} \\stackrel{I F S}{\\rightarrow} x[n] \\quad x[n]=\\sum_{k=\\langle N\\rangle} a_{k} e^{j k \\omega_{0} n}=\\sum_{k=\\langle N\\rangle} a_{k} e^{j k(2 \\pi / N) n}$$\n2.5 Properties of Continuous-Time Fourier Series # 3 Fourier transform for Continuous-time signal \\(x(t)\\) : # 3.1 (CT FT) Continuous-Time, Fourier Transform ( periodic) # $$ x(t) \\stackrel{F T}{\\longrightarrow} X(j \\omega) $$\n$$ \\tilde{x}(t): \\text { single sliced periodic sig } \\ $$\n$$ a_k=\\frac{1}{T} \\int_{-\\frac{T}{2}}^{\\frac{T}{2}} \\tilde{x}(t) e^{-j k \\omega_0 t} d t $$ $$ X(j \\omega)=T a_k $$\n3.2 (CT FT) Continuous-Time, Fourier Transform (aperiodic) # $$x(t) \\stackrel{F T}{\\rightarrow} X(j \\omega) \\quad X(j \\omega)=\\int_{-\\infty}^{+\\infty} x(t) e^{-j \\omega t} d t$$\n3.3 (CT IFT) Continuous-Time, Inverse Fourier Transform # $$X(j w) \\stackrel{I F T}{\\rightarrow} x(t) \\quad x(t)=\\frac{1}{2 \\pi} \\int_{-\\infty}^{+\\infty} X(j \\omega) e^{j \\omega t} d \\omega$$\n3.4 Properties of Continuous Fourier Transform # 3.5 Basic Continuous Fourier Transform Pairs # 4 Fourier transform for Discrete-time signal \\(x[n]\\) # Most of case, aperiodic signals comes…\n4.1 (DT FT) Discrete-Time, Fourier Transform # $$x[n] \\stackrel{F T}{\\rightarrow} X\\left(e^{j \\omega}\\right) \\quad X\\left(e^{j \\omega}\\right)=\\sum_{n=-\\infty}^{+\\infty} x[n] e^{-j \\omega n}$$\n4.2 (DT IFT) Discrete-Time, Inverse Fourier Transform # $$X\\left(e^{j \\omega}\\right) \\stackrel{I F T}{\\rightarrow} x[n] \\quad x[n]=\\frac{1}{2 \\pi} \\int_{2 \\pi} X\\left(e^{j \\omega}\\right) e^{j \\omega n} d \\omega$$\n4.3 Properties of Discrete Fourier Transform # 4.4 Basic Discrete Fourier Transform Pairs # PDF version # Related files DSP_Fourier_CheatNote.pdf (275 KBytes) ","date":"20 December 2022","permalink":"/posts/discrete_signal_processing_cheat_note/","section":"Posts","summary":"1. Fourier series coefficients for Continuous signal # Asking deriving coefficients comes with periodic signal.: \\(x(t) \\rightarrow a_k\\)\n1.1 (CT FS) Basic concept of continuous Fourier coefficients # $$ \\begin{gathered} x(t): \\text { Periodic signal } \\ T: \\text { Fundamental Period } \\ \\end{gathered} $$","title":"Discrete Signal Processing Fourier Transform Cheat Note"},{"content":"","date":"20 December 2022","permalink":"/tags/dsp/","section":"Tags","summary":"","title":"DSP"},{"content":"","date":"20 December 2022","permalink":"/tags/english_article/","section":"Tags","summary":"","title":"English_Article"},{"content":"","date":"20 December 2022","permalink":"/tags/mathmatics/","section":"Tags","summary":"","title":"Mathmatics"},{"content":"","date":"20 December 2022","permalink":"/tags/signal-processing/","section":"Tags","summary":"","title":"Signal Processing"},{"content":"새로 이직한 회사에서 Rust를 쓰고 있습니다. 이직한지 5개월이 지나고 느낀 바를 서술 해보고자 합니다. 문법적인 세세한 장점은 제쳐두고 그냥 간단하게 느낀 바를 서술 합니다.\n장점 # 개발하려는 도메인에 잘아는 개발자가 있으며, 최소 2인에서 코드리뷰를 서로 잘해주면 안전하게 코딩할수 있습니다. C언어와 비교를 하면 매우 편리한점이 많습니다. C언어/펌웨어 만 하던 사람으로서는 다른 현대언어 대비 좀더 친숙하게 느껴지고 대부분의 행위/설계가 reasonable 하게 느껴집니다. 개인적인 의견으로는 프론트엔드 빼고는 많은 부분에 적용할 수 있습니다. [펌웨어, 운영체제 종속 유틸리티, 백엔드] 개발하는 비즈니스 로직에 대한것이 아닌 순수 CS에 대한 공부/도전 요소가 계속 생깁니다. 타겟 아키텍처 (CPU, Operating System)가 어떤 것이 오든, 대응하기 매우 편리합니다. 단점 # 우리는 FullStack을 넘어 EntireStack 개발자가 될 수 있을까?\n각각의 고난포인트 마다 기본적으로 요구하는 지식이 큽니다. 가끔은 개인시간을 넘어드는 공부/도전 요소가 계속 생깁니다. [저에겐 단점이 아니나, 사람에 따라 단점이라고 느낄 수 있다고 생각합니다.] 구인시 제한이 많습니다. 이 언어의 장점이 뭐야? 라는 질문을 받았을 때, 요구하는 지식 범위가 매우 커질 수 밖에 없습니다. 그리고 그 지식범위는 대다수의 관심사 저 멀리 일 수 있습니다. 임베디드에서 사용하고, 국내 개발자 풀을 본다면, 같이 러스트를 쓸 임베디드 개발자를 구하기가 어렵고, 임베디드 개발자에게 추가적으로 요구되는 능력의 풀이 꽤 기하급수적으로 늘어납니다. 임베디드 개발을 주(主)로 하진 않으나 rust를 고려하지않아도 임베디드 개발자 풀이 너무 적습니다. 꼭 제가 쓰려고하는 칩은 rust 임베디드 지원이 애매합니다. (여기에 대한 답은 제가 스스로 기여를 하는 것이긴합니다.) 아직까지는 커뮤니티가 chip-shortage인 상황에 알짜베기 단가/lead time 면에서 쓸만한 칩보다는 toy-project로 쓸만한 칩에 더 치중에 되어있습니다. 기타 # 이전회사에서 코드리뷰관련해서 매우 깐깐하게 했었고 지금 회사에서는 어떻게 되나 걱정했었는데. 제가 초반에 느낀바로는 C언어 대비 문법이 고도화 되어있기에 스타일이 지나치게 개인마다 달라서 리뷰할 때 이 문제가 병목사항이라 생각했습니다만. 많은것 들을 clippy가 어느정도 해주고 typo check와 어느정도 선에서 합의볼수 있는 수준의 test만 있으면 리뷰는 문제없네요. 서로가 자연스레 건전한 CS 주제로 토론을 할 수 있습니다 여러 아키텍처에 적절한 대응이 가능 # 이론이나 개념상으로는 순수히 인터프리터 언어 가 멀티플랫폼 대응에 유리합니다. 하지만 제가 실제로 Rust를 해본 경험 조금 다르게 느꼈습니다. 아무리 이론과 개념상으로 인터프리터 언어가 유리하다고는 하나, 진정으로 모든 아키텍처(CPU Arch와 여러 OS에 대응)를 적절하게 잘 대응 하기에는 Rust가 매우 편했습니다.\n우선 모든 아키텍처를 적절하게 대응한다라는 면은 시스템 프로그래밍 혹은 펌웨어 프로그래밍의 가치 중 하나입니다. 그럼 기존에 이러한 프로그래밍을 하기위해서 어떠한 언어를 썼을까요. 바로 C와 **C++**입니다. 하지만 해당 언어로 바로 빠르게 빠르게 시작(Getting Start) 하기위해서는 Makefile 이나 CMake 설정부터 해줘야 했으며, 아키텍처가 추가될 때 마다 이에 대응해줘야 했습니다. 여기에 해당 아키텍처를 위한 컴파일러, 개발환경, 라이브러리 세팅은 별도입니다.\n그럼 다른 언어와 비교를 해보겠습니다. 현재는 Go-Lang과 Rust를 비교하는 사람은 거의 없으나, 5년전에는 많이들 비교했던 것 같습니다. 시스템 프로그래밍의 영역을 OS위에서만 비교한다고 했을때에는 둘 다 훌륭한 언어입니다. 앞으로 말한 것은 매우 무리수인 발언이나, Rust개념상의 no-std, OS가 없거나 일반적인 OS와는 매우 형질이 다른경우에는 대응이 어렵습니다. [필자는 펌웨어 개발을 이전에 하였으며, 제품 출하가 가능한 펌웨어 개발이 가능한가를 추가로 따지고 있습니다.]\nRust는 당장에 빠르게 프로토타이핑 하기는 어렵다. # 앞에서는 Rust의 장점에 대해 칭찬하였지만 이번 문단에서는 살짝 아쉬운면을 서술합니다. Rust는 쓰기 어려운 언어입니다. 정확히 말하면 Rust의 장점을 최대한 살려서 Rust스럽게, Rust의 장점을 최대한 부각시키며 개발하기 매우 어렵습니다. 현실적으로 모든 언어가 장점을 살려서 개발하기에는 매우 어려울 것입니다. 하지만 영리활동(회사/개발조직에서 사용 언어? 프레임워크)으로서 Rust를 선택한다면, 개인적인 선호는 후순위로 미룬 채 회사의 입장에서 생각해봐야합니다.\n우리가 개발할 수 있는 것을 실현해줄 수 있는 매게체인가. 개발자를 적절히 구인할 수 있는가. 개발 시간 소요가 어떻게 되는가. 빠르고 정확하게 돌아가는가. 구성원들이 쓰고싶어하는가. (다른 의미로 취향) Rust는 (2), (3) 항목에서 낮은 점수를 받을 가능성이 크며, 특히나 (2) 항목에서는 절대적으로 그렇다고 생각합니다.\n위와 같은 단점을 극복하고라도 Rust를 선택해야만 한다면 특히나 (4), (5) 의 원인이 클 것입니다. 이렇게 된다면 개발조직, 개발자 입장에서는 최대한 Rust의 장점을 부각하는 사건이나 결과가 있어야지만 이를 자의적이든 타의적이든 유지하게 될 것 입니다.\n아무리 회사에서 정해주는 언어를 쓰면되지만, 그래도 선택할수 있고 Rust를 계속 쓰고싶다면 부각하고 싶을 겁니다. (좀 서술하기 어려운 부분입니다. 감정적인 영역이 겹쳐져 있어서요)\n그러면 Rust 의 장점을 최대한 살려서 개발하려면 많은 지식을 요구하게 되버립니다. 다른 문장으로 러닝 커브가 높아집니다. 어떻게 보면 스스로 무덤을 파는 행위가 될 수도, 기회가 될 수 도 있습니다.\n하지만 많은 지적 가치를 얻을 수 있는 기회 # 처음에 C언어가 나왔을 때는 멀티 프로세싱/프로세서(SMP) 개념이나 캐시의 개념, GPGPU이 없으며, 세세한 부분에 있어서 현대적인 메모리 모델과는 다르던 시절입니다. 그리고 지금까지는 C언어로 이러한 부분을 핸들링 하고 있습니다. 그리고 이러한 개념들을 고려하면서 개발해야하는 상황에 놓인다면 많은 어려움이 있습니다.\n하지만 Rust는 이를 어느정도 쉽게 극복할 수 있는 인프라가 마련되어 있거나, 앞으로도 더 마련될 여지가 있습니다. 그리고 애매한 문장이지만, Rust를 통해 간접으로 어려운 컴퓨터나 운영체제의 아키텍처 설계에 대해 좀더 면밀히 볼 수 있는 기회가 마련이 되는 것 같습니다. 이는 Rust 컴파일러의 안전을 위한 제약경고를 통해서도 얻을 수 있으며, 우연치 않게 많은 고수들로 이뤄진 시스템 프로그래밍 개발자들이 많은 커뮤니티의 영향이 원인으로 작용한다고 생각합니다. 멀티 플랫폼에 대한 얘기를 조금더 하자면, 커뮤니티의 강력함으로 인해 멀티플랫폼이 매우 잘 대응 된다고도 생각합니다.\n언제 쯤 충분한 Rust 개발자가 되었다고 할 수 있을까? # 나는 ____ 개발자야 라고 다들 가끔 식 말하곤 합니다. 그러면 언제 쯤 우리는 충분한 Rust 개발자가 되었다~ 라고 말할 수 있을까요.\n정답은 없습니다.\n하지만 개인적인 생각으로는 해당 프레임워크 혹은 언어가 가져다주는 장점을 남들이 이해할 수 있게끔 설명할 수 있다면 ____ 개발자라고 말 할 수 있지 않을까? 라고 생각합니다.\n하지만 아쉽게도 Rust 는 이를 서술 하기가 매우 어렵습니다. 당장에 소유권 부터 설명해야 합니다만. 일단 기본적으로 실행 중인 processs의 stack, heap 부터 이해를 해야합니다.\n참고 자료 : 4.1 소유권이 뭔가요 - The Rust Programming Language 한국어 번역\n이러한 문제로 설득시키려고 하는 대상에게 많은것을 설명해줄 능력이 되야하거나, 듣는 대상이 수준이 높기에 정확하고 매우 깊은 설명이 요구되는 상황입니다.\n처음부터 설명의 난이도가 HARD MODE 인 것은 아쉽지만, 혼자 개발하는 세상도 아닐 뿐더러, 우리가 개발을 할때에 Pull-Request를 진정으로 넣고 싶다면 Review를 해주는 사람에게 설명을 잘 하거나, 잘 할수 있도록 코드를 짜는 것은 어느정도 필요하다 생각합니다.\n그러한 과정 속에서 설명을 할 수 있는 지식의 바탕과 말 솜씨를 늘릴 수 있으며, 더 나아가서 서술 한대로 어떠한 기술에 대해 설명할 수 있는 능력이 갖춰지지 않을까 생각합니다.\n다음 혹은 다다음에 회고록을 작성 할 때에는 Rust 회사에서 써서 얻었던 실제의 이득, 손실에 대해서 다뤄보도록 하겠습니다.\n","date":"27 November 2022","permalink":"/posts/five_mothes_ago_from_using_rust_as_work_kr/","section":"Posts","summary":"새로 이직한 회사에서 Rust를 쓰고 있습니다. 이직한지 5개월이 지","title":"Rust를 회사 업무로 쓰고난지 5개월 정도"},{"content":"","date":"4 October 2022","permalink":"/tags/armv8a/","section":"Tags","summary":"","title":"ARMv8A"},{"content":"","date":"4 October 2022","permalink":"/tags/cross-compile/","section":"Tags","summary":"","title":"Cross compile"},{"content":" In October 6, Rust for linux is under the linux-next, not stable\nThus this article would be out-of-date before Linux 6.1 stable comes.\nCurrent linux 6.1 rc1 doesn\u0026rsquo;t contain rust for linux with ARM64. Thus this article play with https://github.com/Rust-for-Linux/linux/tree/for-next/rust\nIntroduction # This article describes cross-compiling rust for linux on x86_64 debian. There is still not enough computing power to build arm64 native kernel except for Apple Silicon.\nBtw, this article is in reference to these links\nhttps://github.com/Rust-for-Linux/linux/blob/rust/Documentation/rust/quick-start.rst https://docs.kernel.org/kbuild/llvm.html#cross-compiling Debian / Ubuntu Package Requirements # # Install build-requirements for kernel compile with LLVM. # Biggest difference to native build is # crossbuild-essential-arm64 needed to build` for arm64 apt install clang git llvm-dev libclang-dev build-essential \\ bc kmod cpio flex libncurses5-dev libelf-dev libssl-dev \\ dwarves bison lld curl crossbuild-essential-arm64 Before build kernel, we need to install some packages.\ncurl --proto \u0026#39;=https\u0026#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh rustup default 1.62 rustup component add rust-src # rustfmt and clippy is need for later developing and debugging. rustup component add rustfmt rustup component add clippy Install rust with curl. You can select just default options. Also current rust for linux working with 1.62. Some native compile is working well with recent version (1.64 tested, but cross compile not working).\nArch Package Requirements # TBD Clone linux from Rust-For-Linux # State of current rust-for-linux, they are under 6.0 RC\n# In my case use `Develop` as worksapce, you can replace this word. mkdir -p ~/Develop cd ~/Develop git clone https://github.com/Rust-for-Linux/linux.git -b rust clone like this.\nNecessary some rust scripts in Rust-For-Linux # In cloned linux directory.\ngit clone --recurse-submodules \\ --branch $(scripts/min-tool-version.sh rustc) \\ https://github.com/rust-lang/rust \\ $(rustc --print sysroot)/lib/rustlib/src/rust This work clone rustlib repository in your rust toolchain directory.\ncargo install --locked --version $(scripts/min-tool-version.sh bindgen) bindgen This work need to bind existing c code to rust code. s\nCheck RUST_AVAILABLE # cd ~/Develop/linux make LLVM=1 rustavailable $ make LLVM=1 rustavailable *** *** Rust compiler \u0026#39;rustc\u0026#39; is too new. This may or may not work. *** Your version: 1.62.1 *** Expected version: 1.62.0 *** Rust is available! Than if you get result like this it\u0026rsquo;s good to go (1.62.1 was fine to cross compile, but if you consider best fit, run rustup default 1.62.0.)\nConfigure linux source code with menuconfig # make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- defconfig make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- menuconfig General setup -\u0026gt; Rust support # In General setup -\u0026gt; Rust support , Enable this If you don\u0026rsquo;t see the flag, double-check that the make LLVM=1 rustavailable process was successful. For a detailed mailing thread on CONFIG_RUST see here. See details \u0026rharu; Kernel hacking -\u0026gt; Sample kernel code # For easy to develop rust kernel code we need some examples. You can get them with following menus.\nIn Kernel hacking -\u0026gt; Sample kernel code , enable it (not all of them..) when you interest. I don\u0026rsquo;t recommend you enable them when you write own driver. Because there\u0026rsquo;s some possibility make system slow or make unwanted log in dmesg. In particular, the netflitter example outputs too many dmesg, so it is recommended that you disable it unless you are studying the netfilter example. Kernel hacking -\u0026gt; Rust hacking # For debug rust kernel code or driver, need to enable some debug options.\nIn Kernel hacking -\u0026gt; Rust hacking , enables it and inside menus.\nCross compile # # -j4 for 4 core virtual machine, -j2 for 2 core, -j1 for single core. make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- LLVM=1 -j32 Build with following command. You need to set number of job considering assigned number of cores for virtual machine. (-j#)\nAlso while you build it, it will ask some flag. I just select default in my case.\nSimple compile speed comparation. # Machine / Environment Compile time M1 Max Virtual Machine (4 core 8GB RAM with aarch64 debian11) 16 minutes M1 Asahi Linux (4P+4E core 16GB RAM MacMini with 6.1.0-rc6-asahi) 11 minutes AMD Ryzen 5950x Native (16 core 32 thread, 64GB with x86_64) 3 minutes AMD Threadripper Pro 5975wx Native (32 core 64 thread, 256GB with x86_64) 2 minutes Install cross compiled kernel to arm64 virtual machine # TBD, will update asap. Install cross compiled kernel to raspberry pi # TBD, will update asap. ","date":"4 October 2022","permalink":"/posts/cross_compiling_aarch64_rust_for_linux_from_x86_64_linux/","section":"Posts","summary":"In October 6, Rust for linux is under the linux-next, not stable\nThus this article would be out-of-date before Linux 6.1 stable comes.\nCurrent linux 6.1 rc1 doesn\u0026rsquo;t contain rust for linux with ARM64.","title":"Cross compiling aarch64(arm64) rust for linux from x86_64 machine"},{"content":"","date":"4 October 2022","permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux"},{"content":" In October, Rust for linux is under the linux-next, not stable\nThus this article would be out-of-date before Linux 6.1 stable comes.\nmodules, out-of-tree # There are two main ways to develop kernel modules. In-Of-Tree and Out-Of-Tree. In this article, we\u0026rsquo;re going to make the Out-Of-Tree method a Rust kernel module.\nBefore we start # Check your kernel has been compiled with CONFIG_RUST=y. # Check with following command.\nzcat /proc/config.gz | grep -i CONFIG_RUST=y The result comes with CONFIG_RUST=y.\nBut you may not check from /proc/config.gz when using distibution kernel image that downloaded or pre-installed.\nNeed some build \u0026 install rust support kernel see here. See details \u0026rharu; Prepare $KDIR # $KDIR is path of kernel source.\nIn this article path of kernel source that system used for boot with CONFIG_RUST.\nKDIR and other kernel module descriptions See details \u0026rharu; In my case it\u0026rsquo;s ~/Develop/linux\n# /home/pmnxis/Develop/linux export KDIR=$HOME/Develop/linux Looking in to code # Let\u0026rsquo;s preview the code rust_out_of_tree.rs \u0026hellip;\nLicense and imports # 1 2 3 4 5 6 7 8 9 10 11 12 13 // SPDX-License-Identifier: GPL-2.0 //! Rust out-of-tree sample use kernel::prelude::*; module! { type: RustOutOfTree, name: \u0026#34;rust_out_of_tree\u0026#34;, author: \u0026#34;Rust for Linux Contributors\u0026#34;, description: \u0026#34;Rust out-of-tree sample\u0026#34;, license: \u0026#34;GPL\u0026#34;, } Lines 1~3, show file\u0026rsquo;s license information. If you are write the code in company, SomeCompanyName instead GPL-2.0 or just keep GPL-2.0. 1 2 3 4 5 6 7 8 9 10 11 12 13 // SPDX-License-Identifier: GPL-2.0 //! Rust out-of-tree sample use kernel::prelude::*; module! { type: RustOutOfTree, name: \u0026#34;rust_out_of_tree\u0026#34;, author: \u0026#34;Rust for Linux Contributors\u0026#34;, description: \u0026#34;Rust out-of-tree sample\u0026#34;, license: \u0026#34;GPL\u0026#34;, } Line 5 means, bring rust for linux library for this code.\nIn following example module written in C were include like this.\n2 3 4 #include \u0026lt;linux/module.h\u0026gt; #include \u0026lt;linux/kthread.h\u0026gt; #include \u0026lt;linux/irq_work.h\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 // SPDX-License-Identifier: GPL-2.0 //! Rust out-of-tree sample use kernel::prelude::*; module! { type: RustOutOfTree, name: \u0026#34;rust_out_of_tree\u0026#34;, author: \u0026#34;Rust for Linux Contributors\u0026#34;, description: \u0026#34;Rust out-of-tree sample\u0026#34;, license: \u0026#34;GPL\u0026#34;, } Line 8, implement of the module trait. Line 9, name of the module, if we written c, it\u0026rsquo;s the name of *.ko name field. Line 10~12, those fields are simillar with below the example written in c. Those fields are same purpose.\n56 57 58 MODULE_AUTHOR(\u0026#34;Steven Rostedt\u0026#34;); MODULE_DESCRIPTION(\u0026#34;trace-printk\u0026#34;); MODULE_LICENSE(\u0026#34;GPL\u0026#34;); We preview macro_rule! module shortly. You can see detail here.\nDetails for module! See details \u0026rharu; Actual implements # 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 struct RustOutOfTree { numbers: Vec\u0026lt;i32\u0026gt;, } impl kernel::Module for RustOutOfTree { fn init(_name: \u0026amp;\u0026#39;static CStr, _module: \u0026amp;\u0026#39;static ThisModule) -\u0026gt; Result\u0026lt;Self\u0026gt; { pr_info!(\u0026#34;Rust out-of-tree sample (init)\\n\u0026#34;); let mut numbers = Vec::new(); numbers.try_push(72)?; numbers.try_push(108)?; numbers.try_push(200)?; Ok(RustOutOfTree { numbers }) } } impl Drop for RustOutOfTree { fn drop(\u0026amp;mut self) { pr_info!(\u0026#34;My numbers are {:?}\\n\u0026#34;, self.numbers); pr_info!(\u0026#34;Rust out-of-tree sample (exit)\\n\u0026#34;); } } I just guess working as \u0026hellip;\nOn init (insmod?), print out somewhere with text Rust out-of-tree sample (init) vec\u0026lt;i32\u0026gt;[72, 108, 200] is stored some kernel memory space with struct RustOutOfTree. When drop the module (rmmod?), will print out with text [72, 108, 200]. By the way, we need to keep on eyes here.\n23 24 let mut numbers = Vec::new(); numbers.try_push(72)?; In line 24, try_push is not exsting in std::Vec. In rust kernel programming, need to use try_push instead std::Vec::push.\nDetails for alloc::vec::Vec See details \u0026rharu; Also there's some `init` and `drop` functions in line 20 and 33. The code covers those function with `impl for` pattern. Details for Implementation in rust See details \u0026rharu; I will explain about implementation and it\u0026rsquo;s philosophy later article.\nRun code # Build it # make LLVM=1 My rust acceptable kernel build were buiten with LLVM.\nSo I compile the kernel module with LLVM.\nInstall module # sudo insmod ./rust_out_of_tree.ko After compile, we can there\u0026rsquo;s rust_out_of_tree.ko inside of project directory.\nWe can install module with insmod that normally used before.\nInspect result # # do `sudo rmmod rust_out_of_tree` if you already install the module` # clear all of dmesg log sudo dmesg -C # install the module sudo insmod ./rust_out_of_tree.ko # see log dmesg # uninstall the module sudo rmmod rust_out_of_tree # check log again. dmesg We can check the inspect actual result with above commands.\nAs we guess it prints with [72, 108, 200].\nConclusion # We can summary from this simple kernel module.\nSummary # Need to use use kernel::prelude::*; on top of code. module! macro to define some description and board my own struct to the kernel module. kernel::Module templete functions \u0026hellip;. -WIP- In kernel programming, use alloc::vec::Vec instead std::Vec. pr_info is just same as way to write with C. Reference # https://github.com/Rust-for-Linux/rust-out-of-tree-module https://www.kernel.org/doc/html/latest/kbuild/modules.html https://github.com/Rust-for-Linux/linux https://rust-for-linux.github.io/docs/kernel/prelude/index.html https://rust-for-linux.github.io/docs/kernel/prelude/macro.module.html https://rust-for-linux.github.io/docs/kernel/prelude/struct.Vec.html ","date":"2 October 2022","permalink":"/posts/look_into_simple_rust_out_of_tree/","section":"Posts","summary":"In October, Rust for linux is under the linux-next, not stable\nThus this article would be out-of-date before Linux 6.1 stable comes.\nmodules, out-of-tree # There are two main ways to develop kernel modules.","title":"[Rust Driver] Let's try build example rust linux driver."},{"content":"","date":"2 October 2022","permalink":"/tags/rust-driver/","section":"Tags","summary":"","title":"Rust Driver"},{"content":" In October 1, Rust for linux is under the linux-next, not stable\nThus this article would be out-of-date before Linux 6.1 stable comes.\nThis article play with https://github.com/Rust-for-Linux/linux/tree/for-next/rust\nIntroduction # Currently Apple Silicon mac series is only one ARM workstation that have powerful performance as normal desktop class workstation and can purchase anywhere. Of course if you have 32GB or bigger memory and least 8 big cores of apple silicon.\nBtw, this article is in reference to https://github.com/Rust-for-Linux/linux/blob/rust/Documentation/rust/quick-start.rst .\nVM hypervisor software selection. # UTM : Free / OpenSource, QEMU based Sometimes tricky. VM Fusion Tech Preview : Free for now / ClosedSource, Moderate Parallels : Non-Free / ClosedSource, not my taste (sorry). There\u0026rsquo;s some option working with Asahi Linux. But in this article is not consider native asahi linux environment.\nIn my case, I was chosen VM Fusion.\nVirtual Machine Configuration # Debian 11 : https://cdimage.debian.org/debian-cd/current/arm64/iso-dvd/ !! Checked working well.\nUbuntu : There were some issue clang and other gcc build tools version mismatch than broken apt things in aarch64 ubuntu apt repo. But you can try with ubuntu.\nArch Linux : https://gitlab.archlinux.org/tpowa/archboot/-/wikis/Archboot-Homepage#aarch64-architecture I didn\u0026rsquo;t tested yet. But tested with Asahi linux with M1 Mac Mini\nDebian / Ubuntu Package Requirements # # Install build-requirements for kernel compile with LLVM. apt install clang git llvm-dev libclang-dev build-essential \\ bc kmod cpio flex libncurses5-dev libelf-dev libssl-dev \\ dwarves bison lld curl Asahi Linux Package Requirements # pacman -S base-devel cpio lld llvm llvm-libs bc libdwarf Ready for rust # Before build kernel, we need to install some packages.\ncurl --proto \u0026#39;=https\u0026#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh rustup default 1.62 rustup component add rust-src # rustfmt and clippy is need for later developing and debugging. rustup component add rustfmt rustup component add clippy Install rust with curl. You can select just default options. Also current rust for linux working with 1.62. Some native compile is working well with recent version (1.64 tested, but cross compile not working).\nClone linux from Rust-For-Linux # State of current rust-for-linux, they are under 6.0 RC\n# In my case use `Develop` as worksapce, you can replace this word. mkdir -p ~/Develop cd ~/Develop git clone https://github.com/Rust-for-Linux/linux.git -b rust clone like this.\nNecessary some rust scripts in Rust-For-Linux # In cloned linux directory.\ngit clone --recurse-submodules \\ --branch $(scripts/min-tool-version.sh rustc) \\ https://github.com/rust-lang/rust \\ $(rustc --print sysroot)/lib/rustlib/src/rust This work clone rustlib repository in your rust toolchain directory.\ncargo install --locked --version $(scripts/min-tool-version.sh bindgen) bindgen This work need to bind existing c code to rust code. s\nCheck RUST_AVAILABLE # cd ~/Develop/linux make LLVM=1 rustavailable $ make LLVM=1 rustavailable *** *** Rust compiler \u0026#39;rustc\u0026#39; is too new. This may or may not work. *** Your version: 1.64.0 *** Expected version: 1.62.0 *** Rust is available! Than if you get result like this it\u0026rsquo;s good to go\nConfigure linux source code with menuconfig # make ARCH=arm64 defconfig make menuconfig Disable GCC plugins # General architecture-dependent options -\u0026gt; GCC plugins For now (6.1 rc*), GCC_PLUGINS config should be disabled for RUST_CONFIG config. Be sure disable it.\nGeneral setup -\u0026gt; Rust support # In General setup -\u0026gt; Rust support , Enable this If you don\u0026rsquo;t see the flag, double-check that the make LLVM=1 rustavailable process was successful. For a detailed mailing thread on CONFIG_RUST see here. See details \u0026rharu; Kernel hacking -\u0026gt; Sample kernel code # For easy to develop rust kernel code we need some examples. You can get them with following menus.\nIn Kernel hacking -\u0026gt; Sample kernel code , enable it (not all of them..) when you interest. I don\u0026rsquo;t recommend you enable them when you write own driver. Because there\u0026rsquo;s some possibility make system slow or make unwanted log in dmesg. In particular, the netflitter example outputs too many dmesg, so it is recommended that you disable it unless you are studying the netfilter example. Kernel hacking -\u0026gt; Rust hacking # For debug rust kernel code or driver, need to enable some debug options.\nIn Kernel hacking -\u0026gt; Rust hacking , enables it and inside menus.\nCompile and install it in virtual machine. # # -j4 for 4 core virtual machine, -j2 for 2 core, -j1 for single core. make LLVM=1 -j4 Build with following command. You need to set number of job considering assigned number of cores for virtual machine. (-j#)\nAlso while you build it, it will ask some flag. I just select default in my case.\nIt takes lot of time (don\u0026rsquo;t worry much better than raspberry pi 4), 13~14 minuites takes in my environment (VM 4core, 8GB)\nAfter than, install via following command\n# should be under the root permision. make modules_install make install update-grub It\u0026rsquo;s done!. Reboot program and then check the kernel working well.\nLinux lambda-next 6.0.0-rc7-175589-g542379556669 #2 SMP PREEMPT Sun Oct 2 19:02:32 KST 2022 aarch64 The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. Last login: Sun Oct 2 18:20:21 2022 from 192.168.99.1 pmnxis@lambda-next:~$ uname -r 6.0.0-rc7-175589-g542379556669 Simple compile speed comparation. # Machine / Environment Compile time M1 Max Virtual Machine (4 core 8GB RAM with aarch64 debian11) 16 minutes M1 Asahi Linux (4P+4E core 16GB RAM MacMini with 6.1.0-rc6-asahi) 11 minutes AMD Ryzen 5950x Native (16 core 32 thread, 64GB with x86_64) 3 minutes AMD Threadripper Pro 5975wx Native (32 core 64 thread, 256GB with x86_64) 2 minutes ","date":"1 October 2022","permalink":"/posts/rust_for_linux_with_m1/","section":"Posts","summary":"In October 1, Rust for linux is under the linux-next, not stable\nThus this article would be out-of-date before Linux 6.1 stable comes.\nThis article play with https://github.com/Rust-for-Linux/linux/tree/for-next/rust\nIntroduction # Currently Apple Silicon mac series is only one ARM workstation that have powerful performance as normal desktop class workstation and can purchase anywhere.","title":"Rust For Linux Development Environment with AppleSilicon MacOS"},{"content":" Introduction # ARMv8A는 흔히 aarch64로도 불리며 현재 ARMv7A를 뒤로한채 널리 사용하는 아키텍처중 하나입니다. 본 글에서는 ARMv8A의 메모리 시스템을 IP단위로 보려합니다.\n사용하는 메모리 (DDR4 , LPDDR4 , DDR3 , LPDDR3 , DDR2)나 사용하는 아키텍처(ARM v8.1 or 8.2)에 조금씩 다르나 대체적으로 위 사진과 같은 형태로 구성이 되어있습니다.\nComponents # CPU # Instruction을 처리합니다.\nGIC # Generic Interrupt Controller; GIC는 각종 Nested한 Interrupt를 관리하며, Interrupt발생시 CPU에서 동작중이던 PC/Register를 백업하고 해당하는 Inetrrupt Vector를 Execution하도록 합니다.\nCCI / CCN # Cache Coherent Interconnect / Netowrk\nDMC # DRAM을 관리합니다. DRAM은 휘발성 메모리로서 Read/Write 이외에 Refresh, Callibration 와 같은 작업이 필요합니다. 추가적으로 EEC, RAS에 대한 관리도 수행합니다. Linux드라이버에서는 edac 디렉터리에서 EEC, RAS에 대한 관리 드라이버 코드를 확인 할 수 있습니다.\nNIC # 각종 Peripheral 을 연결하는데 사용합니다.\nMMU # PA/VA (Physical/Virtual Address) 변환 DMA 컨트롤 Reference # CCI-400 ; https://developer.arm.com/Processors/CoreLink%20CCI-400 CCI-500 ; https://developer.arm.com/Processors/CoreLink%20CCI-500 DMC-400 ; DDR3/DDR2 DMC ; https://developer.arm.com/documentation/ddi0466/f/introduction/about-the-dmc-400 DMC-500 ; LPDDR4/LPDDR3 DMC ; https://developer.arm.com/documentation/100131/0000 ","date":"14 December 2021","permalink":"/posts/arm_v8a_memory_ip_review/","section":"Posts","summary":"Introduction # ARMv8A는 흔히 aarch64로도 불리며 현재 ARMv7","title":"ARMv8A Memory IP Review"},{"content":"","date":"14 December 2021","permalink":"/tags/electronics/","section":"Tags","summary":"","title":"Electronics"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"}]